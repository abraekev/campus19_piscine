1. sed (Stream Editor)

sed is a stream editor used to perform basic text transformations on an input stream (a file or input from a pipeline). It is not interactive, meaning it processes text according to the provided instructions and outputs the result.

Example: Replace the first occurrence of 'hello' with 'world' in a file named example.txt.

bash

sed 's/hello/world/' example.txt



2. awk

awk is a powerful programming language designed for text processing and typically used as a data extraction and reporting tool. It's particularly strong in processing column-based data.

Example: Print the first and third column of a file named data.txt, assuming columns are separated by spaces.

bash

awk '{print $1, $3}' data.txt



3. grep (Global Regular Expression Print)

grep searches files for lines that match a given pattern and outputs the matching lines. It's widely used for searching through large volumes of text.

Example: Search for lines containing 'error' in a file named log.txt.

bash

grep 'error' log.txt



4. cut

cut is used to extract sections from each line of input, typically from a file. It's used to cut out selected portions of each line from a file by bytes, characters, or fields.

Example: Extract the first column from a comma-separated values (CSV) file named data.csv.

bash

cut -d ',' -f 1 data.csv

In this example, -d ',' specifies the delimiter as a comma, and -f 1 specifies the first field.
5. tr (Translate or Transliterate)

tr is used to translate or delete characters from the input, taken from stdin, and writes the result to stdout. It's used for replacing or removing specific characters in its input data set.

Example: Replace all occurrences of 'a' with 'b' in a file named content.txt.

bash

cat content.txt | tr 'a' 'b'

Or delete all digits from the file:

bash

cat content.txt | tr -d '0-9'

Each of these commands can be combined with others through pipelines (|) to perform complex text processing tasks in Unix-like operating systems.
